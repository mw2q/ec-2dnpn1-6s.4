BEGIN;
BEGIN
EXPLAIN
select
	c_custkey,
	c_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	c_acctbal,
	n_name,
	c_address,
	c_phone,
	c_comment
from
	customer,
	orders,
	lineitem,
	nation
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate >= date '1994-10-01'
	and o_orderdate < cast(date '1994-10-01' + interval '3 month' as date)
	and l_returnflag = 'R'
	and c_nationkey = n_nationkey
group by
	c_custkey,
	c_name,
	c_acctbal,
	c_phone,
	n_name,
	c_address,
	c_comment
order by
	revenue desc
LIMIT 20;
                                                                                                   QUERY PLAN                                                                                                   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=10259988.24..10259988.29 rows=20 width=175)
   ->  Sort  (cost=10259988.24..10264085.30 rows=1638823 width=175)
         Sort Key: (sum((sum((lineitem.l_extendedprice * ('1'::double precision - lineitem.l_discount)))))) DESC
         ->  HashAggregate  (cost=10199991.52..10216379.75 rows=1638823 width=175)
               Group Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
               ->  Remote Subquery Scan on all (datanode_1_1,datanode_2_1,datanode_3_1,datanode_4_1,datanode_5_1,datanode_6_1,datanode_7_1,datanode_8_1)  (cost=1134392.63..10159020.95 rows=1638823 width=175)
                     ->  HashAggregate  (cost=1134392.63..10159020.95 rows=1638823 width=175)
                           Group Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                           ->  Hash Join  (cost=1134392.63..10159020.95 rows=1638823 width=175)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Nested Loop  (cost=1134391.07..10136485.57 rows=1638823 width=153)
                                       ->  Hash Join  (cost=1134390.95..4259221.05 rows=1662736 width=149)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Bitmap Heap Scan on orders  (cost=121857.95..2740887.94 rows=5743000 width=8)
                                                   Recheck Cond: ((o_orderdate >= '1994-10-01'::date) AND (o_orderdate < '1995-01-01'::date))
                                                   ->  Bitmap Index Scan on orders_o_orderdate_o_orderkey_idx  (cost=0.00..120422.20 rows=5743000 width=0)
                                                         Index Cond: ((o_orderdate >= '1994-10-01'::date) AND (o_orderdate < '1995-01-01'::date))
                                             ->  Hash  (cost=502767.00..502767.00 rows=15000000 width=145)
                                                   ->  Seq Scan on customer  (cost=0.00..502767.00 rows=15000000 width=145)
                                       ->  Index Scan using lineitem_l_orderkey_idx_l_returnflag on lineitem  (cost=0.12..3.52 rows=1 width=12)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(23 rows)

COMMIT;
COMMIT
