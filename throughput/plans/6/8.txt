BEGIN;
BEGIN
EXPLAIN
select
	o_year,
	sum(case
		when nation = 'BRAZIL' then volume
		else 0
	end) / sum(volume) as mkt_share
from
	(
		select
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) as volume,
			n2.n_name as nation
		from
			part,
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2,
			region
		where
			p_partkey = l_partkey
			and s_suppkey = l_suppkey
			and l_orderkey = o_orderkey
			and o_custkey = c_custkey
			and c_nationkey = n1.n_nationkey
			and n1.n_regionkey = r_regionkey
			and r_name = 'AMERICA'
			and s_nationkey = n2.n_nationkey
			and o_orderdate between date '1995-01-01' and date '1996-12-31'
			and p_type = 'SMALL POLISHED COPPER'
	) as all_nations
group by
	o_year
order by
	o_year;
                                                                                                                   QUERY PLAN                                                                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=8311321.10..8311322.93 rows=732 width=38)
   Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
   ->  HashAggregate  (cost=8311273.46..8311286.27 rows=732 width=38)
         Group Key: date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
         ->  Remote Subquery Scan on all (datanode_1_1,datanode_2_1,datanode_3_1,datanode_4_1,datanode_5_1,datanode_6_1,datanode_7_1,datanode_8_1)  (cost=674935.53..8311055.08 rows=10919 width=38)
               ->  HashAggregate  (cost=674935.53..8311055.08 rows=732 width=38)
                     Group Key: date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
                     ->  Hash Join  (cost=674935.53..8311055.08 rows=10919 width=38)
                           Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                           ->  Hash Join  (cost=674933.97..8310848.79 rows=10919 width=16)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 ->  Hash Join  (cost=630634.97..8266399.65 rows=10919 width=16)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Nested Loop  (cost=4115.44..7638592.38 rows=188569 width=20)
                                             ->  Remote Subquery Scan on all (datanode_1_1,datanode_2_1,datanode_3_1,datanode_4_1,datanode_5_1,datanode_6_1,datanode_7_1,datanode_8_1)  (cost=4215.24..3451506.32 rows=620453 width=16)
                                                   Distribute results by H: l_orderkey
                                                   ->  Nested Loop  (cost=4115.24..3438376.80 rows=620453 width=16)
                                                         ->  Bitmap Heap Scan on part  (cost=4115.05..281426.45 rows=133530 width=4)
                                                               Recheck Cond: ((p_type)::text = 'SMALL POLISHED COPPER'::text)
                                                               ->  Bitmap Index Scan on part_p_type_p_partkey_idx  (cost=0.00..4081.66 rows=133530 width=0)
                                                                     Index Cond: ((p_type)::text = 'SMALL POLISHED COPPER'::text)
                                                         ->  Materialize  (cost=100.20..123.73 rows=5 width=20)
                                                               ->  Remote Subquery Scan on all (datanode_1_1,datanode_2_1,datanode_3_1,datanode_4_1,datanode_5_1,datanode_6_1,datanode_7_1,datanode_8_1)  (cost=100.20..123.72 rows=5 width=20)
                                                                     Distribute results by H: l_partkey
                                                                     ->  Index Scan using lineitem_l_partkey_l_quantity_l_shipmode_idx on lineitem  (cost=0.20..23.59 rows=5 width=20)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                             ->  Index Scan using pk_orders on orders  (cost=0.20..6.76 rows=1 width=12)
                                                   Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                   Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=589019.53..589019.53 rows=3000000 width=4)
                                             ->  Hash Join  (cost=2.53..589019.53 rows=3000000 width=4)
                                                   Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..502767.00 rows=15000000 width=8)
                                                   ->  Hash  (cost=2.47..2.47 rows=5 width=4)
                                                         ->  Hash Join  (cost=1.07..2.47 rows=5 width=4)
                                                               Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Hash  (cost=31799.00..31799.00 rows=1000000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..31799.00 rows=1000000 width=8)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(44 rows)

COMMIT;
COMMIT
